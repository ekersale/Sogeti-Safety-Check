#!/usr/bin/env node

/**
 * Module dependencies.
 */

process.env.jwtSecretKey = '234619F40F12BC5825938FBEBA02725F3A50C4B5468CED70872C0C1D57B915BF3BA5F20880DFD34F122061B708426A85AF6622839B58DD4683688C82FD9E2893';


var app = require('../app');
var http = require('http').Server(app);
var io = require('socket.io')(http);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Listen on provided port, on all network interfaces.
 */

var clients = [];

io.on('connection', function(socket){
  clients.push({socket: socket, client: socket.handshake.query.client});

  socket.on('disconnect', function () {
    var index = clients.map(function(obj, index) {
      if(obj.client == socket.handshake.query.client) {
        return index;
      }
    }).filter(isFinite);
    if (index >= 0)
      clients.splice(index, 1);
  });

  io.on('sendMessage', function(data) {
    console.log(data);
  });

});



http.listen(port);

/*app.listen(port, function(){
  console.log("All right ! I'm using port " + port  + ".");
});*/

app.get('*', function(req, res, next) {
  var err = new Error();
  err.message = "Not found.";
  err.status = 404;
  next(err);
});

app.post('*', function(req, res, next) {
  var err = new Error();
  err.message = "Not found.";
  err.status = 404;
  next(err);
});

app.put('*', function(req, res, next) {
  var err = new Error();
  err.message = "Not found.";
  err.status = 404;
  next(err);
});

app.delete('*', function(req, res, next) {
  var err = new Error();
  err.message = "Not found.";
  err.status = 404;
  next(err);
});

app.use(function(err, req, res, next) {
  res.status(parseInt((err.status != undefined) ? err.status: 500)).json({
    message: err.message,
    error: err
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
